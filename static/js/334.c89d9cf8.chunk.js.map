{"version":3,"file":"static/js/334.c89d9cf8.chunk.js","mappings":"gQAEaA,E,OAAMC,GAAAA,OAAH,4U,SCGT,SAASC,EAAT,GAAmC,IAAbC,EAAY,EAAZA,SAC3B,GAAuBC,EAAAA,EAAAA,MAEjBC,GAFN,eAEiCC,IAAI,SAErC,GAA0BC,EAAAA,EAAAA,UAAQ,OAACF,QAAD,IAACA,EAAAA,EAAe,IAAlD,eAAOG,EAAP,KAAcC,EAAd,KAYA,OACE,0BACE,kBAAMN,SAPW,SAAAO,GACnBA,EAAMC,iBACNR,EAASK,EACV,EAIG,WACE,kBACEI,KAAK,OACLC,MAAOL,EACPM,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,SAnBY,SAAAP,GAClB,IAAMF,EAAQE,EAAMQ,OAAOL,MAC3BJ,EAASD,EACV,KAkBK,SAACR,EAAD,yBAIP,C,sBC0BD,MAzDA,WACE,OAAkCO,EAAAA,EAAAA,WAAS,GAA3C,eAAOY,EAAP,KAAkBC,EAAlB,KACA,GAA0Bb,EAAAA,EAAAA,UAAS,MAAnC,eAAOc,EAAP,KAAcC,EAAd,KACA,GAAwClB,EAAAA,EAAAA,MAAxC,eAAOmB,EAAP,KAAqBC,EAArB,KACA,GAAsCjB,EAAAA,EAAAA,UAAS,IAA/C,eAAOkB,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,MAIXvB,EAAckB,EAAajB,IAAI,SAyBrC,OAlBAuB,EAAAA,EAAAA,YAAU,WAAM,wCAEd,oGAEIT,GAAa,GAFjB,UAG8BU,EAAAA,EAAAA,IAAgBzB,GAH9C,OAGU0B,EAHV,OAKIL,EAAeK,GALnB,gDAOIT,EAAS,KAAMU,SAPnB,yBASIZ,GAAa,GATjB,6EAFc,sBACM,OAAhBf,GADU,mCAed4B,CAAe5B,EAChB,GAAE,CAACA,KAGF,4BACE,SAACH,EAAD,CAAYC,SAzBC,SAAAK,GACfgB,EAAgB,CAAEhB,MAAOA,GAE1B,IAuBIa,IAAS,0CAAkBA,KAC3BF,IAAa,SAACe,EAAA,EAAD,KACd,wBACGT,GACCA,EAAYU,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACxB,OACE,+BACE,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMZ,GAAYa,GAAE,kBAAaH,GAAhD,SACGD,KAFIC,IAOd,QAIV,C","sources":["components/SearchForm/SearchFormStyled.js","components/SearchForm/SearchForm.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  text-decoration: none;\n\n  width: 100px;\n  border: 1px solid #227093;\n  border-radius: 10px;\n  font-size: 12px;\n  text-align: center;\n  padding: 5px 0;\n  margin-left: 10px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  &:hover,\n  &:focus {\n    background-color: #227093;\n    color: #fff;\n  }\n`;\n","import React, { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Btn } from './SearchFormStyled';\n\nexport function SearchForm({ onSubmit }) {\n  const [searchParams] = useSearchParams();\n  //query будет появляться в адресной строке ?query= (то, что введем в поле поиска)\n  const searchQuery = searchParams.get('query');\n  //   console.log('query', query);\n  const [query, setQuery] = useState(searchQuery ?? '');\n\n  const handleInput = event => {\n    const query = event.target.value;\n    setQuery(query);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(query);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          name=\"name\"\n          value={query}\n          type=\"text\"\n          autocomplete=\"off\"\n          autoFocus\n          onChange={handleInput}\n        ></input>\n        <Btn>Search</Btn>\n      </form>\n    </div>\n  );\n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { searchFilmsData } from 'servisies/Api';\n\nfunction MoviesPage() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [querySearch, setQuerySearch] = useState([]);\n  const location = useLocation();\n  // console.log('MoviesPage', location);\n\n  //указываем ключ query\n  const searchQuery = searchParams.get('query');\n\n  const onSubmit = query => {\n    setSearchParams({ query: query });\n    // console.log('query', query);\n  };\n\n  useEffect(() => {\n    if (searchQuery === null) return;\n    async function getSearchFilms() {\n      try {\n        setIsLoading(true);\n        const searchFilms = await searchFilmsData(searchQuery);\n        // console.log('searchFilms', searchFilms);\n        setQuerySearch(searchFilms);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getSearchFilms(searchQuery);\n  }, [searchQuery]);\n\n  return (\n    <div>\n      <SearchForm onSubmit={onSubmit} />\n      {error && <p>Ooops, error: {error}</p>}\n      {isLoading && <Loader />}\n      <ul>\n        {querySearch &&\n          querySearch.map(({ title, id }) => {\n            return (\n              <>\n                <li key={id}>\n                  <Link state={{ from: location }} to={`/movies/${id}`}>\n                    {title}\n                  </Link>\n                </li>\n              </>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n\nexport default MoviesPage;\n"],"names":["Btn","styled","SearchForm","onSubmit","useSearchParams","searchQuery","get","useState","query","setQuery","event","preventDefault","name","value","type","autocomplete","autoFocus","onChange","target","isLoading","setIsLoading","error","setError","searchParams","setSearchParams","querySearch","setQuerySearch","location","useLocation","useEffect","searchFilmsData","searchFilms","message","getSearchFilms","Loader","map","title","id","state","from","to"],"sourceRoot":""}